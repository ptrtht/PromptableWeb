/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { Json } from "./supabase.types";

export const publicApiKeyStatusEnumSchema = z.union([
  z.literal("active"),
  z.literal("revoked"),
  z.literal("deleted"),
]);

export const publicPipelineResultSchema = z.union([
  z.literal("Success"),
  z.literal("Fail"),
  z.literal("Warn"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicApiKeysRowSchemaSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  key: z.string().nullable(),
  name: z.string().nullable(),
  status: publicApiKeyStatusEnumSchema,
  user_id: z.string().nullable(),
});

export const publicApiKeysInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  key: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  status: publicApiKeyStatusEnumSchema.optional(),
  user_id: z.string().optional().nullable(),
});

export const publicApiKeysUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  key: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  status: publicApiKeyStatusEnumSchema.optional(),
  user_id: z.string().optional().nullable(),
});

export const publicApiKeysRelationshipsSchemaSchema = z.tuple([]);

export const publicPipelineRunsRowSchemaSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  input: jsonSchema.nullable(),
  log: jsonSchema,
  pipeline_id: z.string(),
  price: z.number(),
  result: publicPipelineResultSchema,
  version: z.number(),
});

export const publicPipelineRunsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  input: jsonSchema.optional().nullable(),
  log: jsonSchema,
  pipeline_id: z.string(),
  price: z.number(),
  result: publicPipelineResultSchema,
  version: z.number(),
});

export const publicPipelineRunsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  input: jsonSchema.optional().nullable(),
  log: jsonSchema.optional(),
  pipeline_id: z.string().optional(),
  price: z.number().optional(),
  result: publicPipelineResultSchema.optional(),
  version: z.number().optional(),
});

export const publicPipelineRunsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("pipeline_runs_pipeline_id_fkey"),
    columns: z.tuple([z.literal("pipeline_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("pipelines"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("pipeline_runs_pipeline_id_fkey"),
    columns: z.tuple([z.literal("pipeline_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("v_pipeline_stats_total"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPipelinesRowSchemaSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  modified_at: z.string(),
  name: z.string(),
  pipeline: jsonSchema,
  user_id: z.string(),
  version: z.number(),
});

export const publicPipelinesInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  name: z.string().optional(),
  pipeline: jsonSchema,
  user_id: z.string(),
  version: z.number().optional(),
});

export const publicPipelinesUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  modified_at: z.string().optional(),
  name: z.string().optional(),
  pipeline: jsonSchema.optional(),
  user_id: z.string().optional(),
  version: z.number().optional(),
});

export const publicPipelinesRelationshipsSchemaSchema = z.tuple([]);

export const publicPromptLogsRowSchemaSchema = z.object({
  created_at: z.string(),
  id: z.number(),
  input: jsonSchema.nullable(),
  output: jsonSchema.nullable(),
  user_id: z.string().nullable(),
});

export const publicPromptLogsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  input: jsonSchema.optional().nullable(),
  output: jsonSchema.optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicPromptLogsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.number().optional(),
  input: jsonSchema.optional().nullable(),
  output: jsonSchema.optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicPromptLogsRelationshipsSchemaSchema = z.tuple([]);

export const publicProvidersRowSchemaSchema = z.object({
  created_at: z.string(),
  description: z.string(),
  id: z.number(),
  link: z.string(),
  logo_url: z.string(),
  name: z.string(),
});

export const publicProvidersInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  description: z.string(),
  id: z.number().optional(),
  link: z.string(),
  logo_url: z.string(),
  name: z.string(),
});

export const publicProvidersUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional(),
  id: z.number().optional(),
  link: z.string().optional(),
  logo_url: z.string().optional(),
  name: z.string().optional(),
});

export const publicProvidersRelationshipsSchemaSchema = z.tuple([]);

export const publicVirtualKeysRowSchemaSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  key: z.string(),
  name: z.string(),
  provider: z.string(),
  status: publicApiKeyStatusEnumSchema,
  user_id: z.string(),
});

export const publicVirtualKeysInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  key: z.string(),
  name: z.string(),
  provider: z.string(),
  status: publicApiKeyStatusEnumSchema.optional(),
  user_id: z.string(),
});

export const publicVirtualKeysUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  key: z.string().optional(),
  name: z.string().optional(),
  provider: z.string().optional(),
  status: publicApiKeyStatusEnumSchema.optional(),
  user_id: z.string().optional(),
});

export const publicVirtualKeysRelationshipsSchemaSchema = z.tuple([]);

export const publicVOrphanedVirtualKeysRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  id: z.string().nullable(),
  key: z.string().nullable(),
  name: z.string().nullable(),
  provider: z.string().nullable(),
  status: publicApiKeyStatusEnumSchema.nullable(),
  user_id: z.string().nullable(),
});

export const publicVOrphanedVirtualKeysRelationshipsSchemaSchema = z.tuple([]);

export const publicVPipelineStatsTotalRowSchemaSchema = z.object({
  created_at: z.string().nullable(),
  error_rate: z.number().nullable(),
  id: z.string().nullable(),
  modified_at: z.string().nullable(),
  name: z.string().nullable(),
  price_per_run: z.number().nullable(),
  status: z.string().nullable(),
  total_runs: z.number().nullable(),
  user_id: z.string().nullable(),
  version: z.number().nullable(),
});

export const publicVPipelineStatsTotalRelationshipsSchemaSchema = z.tuple([]);
